import bpy
from bpy.props import *

def initSceneProperties(scn):
 
    bpy.types.Scene.MyInt = IntProperty(
        name = "Counter", 
        description = "Enter the first Number",
        default = 1,
        min = 1,
        max = 1000)
        
#Habe hier noch einen veränderbare eigenschaft "Textgröße" eingefügt, jetzt funktioniert es nicht mehr...

    bpy.types.Scene.TextGr = FloatProperty(
        name = "Textgröße", 
        description = "Enter the first Number",
        default = 0.75,


    bpy.types.Scene.MyString = StringProperty(
        name = "String")
    scn['MyString'] = "Text"
    return
 
initSceneProperties(bpy.context.scene)




class NumberPanel(bpy.types.Panel):
    bl_space_type = "VIEW_3D"
    bl_region_type = "TOOLS"
    bl_context = "objectmode"
    bl_category = "Tools"
    bl_label = "Number Panel"
   

 
    def draw(self, context):
        layout = self.layout.column(align=True)
        layout.operator("mesh.make_number", text="Make Number")
        layout = self.layout
        scn = context.scene
        layout.prop(scn, 'MyInt')
        layout.prop(scn, 'MyString')
        layout.prop(scn, 'TextGr')

        
        
class MakeNumber(bpy.types.Operator) :
    bl_idname = "mesh.make_number"
    bl_label = "Number Panel"
    bl_options = {"UNDO"}
 
    def invoke(self, context, event) :
        value1 = bpy.context.scene.MyInt
        bpy.context.scene.MyInt += 1
        TextGr = bpy.types.Scene.TextGr
        string1 = bpy.context.scene.MyString
        strval = str(string1)+str(value1)
        bpy.ops.object.text_add()
        ob = bpy.context.object
        ob.name = (str(strval))
        tcu = ob.data
        tcu.name = (str(strval))
        tcu.body = (str(strval))
        tcu.font = bpy.data.fonts[0]
        tcu.offset_x = 0
        tcu.offset_y = 0
        tcu.shear = 0
        tcu.size = float(TextGr)
        tcu.space_character = 1.1
        tcu.space_word = 1
        tcu.extrude = 0.1
        tcu.fill_mode="FRONT"
        tcu.use_fill_deform = True
        tcu.fill_mode="FRONT"
   
        return {"FINISHED"}

class OBJECT_OT_PrintPropsButton(bpy.types.Operator):
    bl_idname = "idname_must.be_all_lowercase_and_contain_one_dot"
    bl_label = "Print props"
 
    def execute(self, context):
        scn = context.scene
        printProp("Float:  ", 'MyFloat', scn)
        printProp("Float:  ", 'TextGr', scn)
        printProp("String: ", 'MyString', scn)
        return{'FINISHED'}    
 
def printProp(label, key, scn):
    try:
        val = scn[key]
    except:
        val = 'Undefined'
    print("%s %s" % (key, val))
 
#    Registration
bpy.utils.register_module(__name__)


#
#
# Hier folgt die Variante 2 mit einerm NIV-Pfeil unter der eingepflegen nummer und einer kleineren Skalierung
# Es wäre sinnvoll darin noch einen ein- und ausschalter einzubringen und die skallierung aller Größenwerte per Schaltfläche zu ermöglichen
#
#

import bpy
from bpy.props import *

def initSceneProperties(scn):
 
    bpy.types.Scene.MyInt = IntProperty(
        name = "Counter", 
        description = "Enter the first Number",
        default = 1,
        min = 1,
        max = 1000)

    bpy.types.Scene.MyString = StringProperty(
        name = "String")
    scn['MyString'] = "Text"
    return
 
initSceneProperties(bpy.context.scene)




class NumberPanel(bpy.types.Panel):
    bl_space_type = "VIEW_3D"
    bl_region_type = "TOOLS"
    bl_context = "objectmode"
    bl_category = "Tools"
    bl_label = "Number Panel"
   

 
    def draw(self, context):
        layout = self.layout.column(align=True)
        layout.operator("mesh.make_number", text="Make Number")
        layout = self.layout
        scn = context.scene
        layout.prop(scn, 'MyInt')
        layout.prop(scn, 'MyString')

        
        
class MakeNumber(bpy.types.Operator) :
    bl_idname = "mesh.make_number"
    bl_label = "Number Panel"
    bl_options = {"UNDO"}
 
    def invoke(self, context, event) :
        value1 = bpy.context.scene.MyInt
        bpy.context.scene.MyInt += 1
        string1 = bpy.context.scene.MyString
        strval = str(string1)+str(value1)
        bpy.ops.object.text_add()
        ob = bpy.context.object
        ob.name = (str(strval))
        tcu = ob.data
        tcu.name = (str(strval))
        tcu.body = (str(strval))
        tcu.font = bpy.data.fonts[0]
        tcu.offset_x = -0.005
        tcu.offset_y = 0.015
        tcu.shear = 0
        tcu.size = .03
        tcu.space_character = 1.1
        tcu.space_word = 1
        tcu.extrude = 0.001
        tcu.fill_mode="FRONT"
        tcu.use_fill_deform = True
        tcu.fill_mode="FRONT"

       
        coords = [[0, 0, 0], [-0.008, 0.012, 0], [0.008, 0.012, 0]]
        faces = [[0,2,1]]
        me = bpy.data.meshes.new("Triangle")
        ob = bpy.data.objects.new("Triangle", me)
        #bpy.context.scene.objects.link(ob)
        ob.location = bpy.context.scene.cursor_location
        bpy.context.scene.objects.link(ob)
        #mesh.from_pydata([context.scene.cursor_location], [], [])
        me.from_pydata(coords, [], faces)
        me.update()
        bpy.context.scene.objects.active = ob
        
        return {"FINISHED"}

class OBJECT_OT_PrintPropsButton(bpy.types.Operator):
    bl_idname = "idname_must.be_all_lowercase_and_contain_one_dot"
    bl_label = "Print props"
 
    def execute(self, context):
        scn = context.scene
        printProp("Float:  ", 'MyFloat', scn)
        printProp("String: ", 'MyString', scn)
        return{'FINISHED'}    
 
def printProp(label, key, scn):
    try:
        val = scn[key]
    except:
        val = 'Undefined'
    print("%s %s" % (key, val))
 
#    Registration
bpy.utils.register_module(__name__)

